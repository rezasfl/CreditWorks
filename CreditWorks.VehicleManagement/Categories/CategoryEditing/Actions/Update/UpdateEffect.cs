using CreditWorks.VehicleManagement.Categories.CategoryEditing;
using CreditWorks.VehicleManagement.Categories.CategoryEditing.Actions;
using CreditWorks.VehicleManagement.Categories.CategoryEditing.Actions.List;
using CreditWorks.VehicleManagement.Categories.CategoryEditing.Actions.Update;
using CreditWorks.VehicleManagement.Categories.CategoryEditing.Models;
using CreditWorks.VehicleManagement.Core.Managers;
using Fluxor;
using System.Collections.Immutable;

namespace CreditWorks.Categories.CategoryEditing.VehicleListing.Actions.Update
{
    public class UpdateEffect : Effect<UpdateAction>
    {
        private readonly VehicleManager _manager;
        private readonly ILogger<UpdateEffect> _logger;
        private readonly IState<CategoriesState> _state;

        public UpdateEffect(VehicleManager manager, ILogger<UpdateEffect> logger, IState<CategoriesState> state)
        {
            _manager = manager;
            _logger = logger;
            _state = state;
        }

        public override async Task HandleAsync(UpdateAction action, IDispatcher dispatcher)
        {
            try
            {
                if (_state.Value.UnderEdit != null)
                {
                    var categories = GenerateDBCategory(_state.Value.UnderEdit.Categories);

                    //We add and update in one method because incase somewthing goes wrong, we want to 
                    //rollback the entire transaction to ensure consistency
                    var result = await _manager.UpsertCategories(categories);

                    dispatcher.Dispatch(new ListSuccessAction(GenerateCategoryList(result)));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error updating category, reason: {ex.Message}");
                dispatcher.Dispatch(new CategoriesFailureAction(ex.Message));

                //TODO: UI flux effect for showing error in UI
            }
        }

        private static IEnumerable<VehicleManagement.Data.Models.Category> GenerateDBCategory(IEnumerable<Category> categories)
        {
            var newCategories = new List<VehicleManagement.Data.Models.Category>();

            foreach (var category in categories)
            {
                var newCategory = new VehicleManagement.Data.Models.Category();

                //for new categories (Id < 0), new Id is generated by the DB
                //But we need to set it for existing ones
                if (category.Id > 0)
                    newCategory.Id = category.Id;

                newCategory.Name = category.Name ?? throw new InvalidDataException();
                newCategory.MinWeight = category.MinWeight ?? throw new InvalidDataException();
                newCategory.MaxWeight = category.MaxWeight ?? throw new InvalidDataException();
                newCategory.IconUrl = category.Icon ?? throw new InvalidDataException();

                newCategories.Add(newCategory);
            }

            return newCategories;
        }

        private static CategoriesList GenerateCategoryList(IEnumerable<VehicleManagement.Data.Models.Category> categories)
        {
            var convertedCategories = categories
                .Select(c => new Category(c.Id, c.Name, c.MinWeight, c.MaxWeight, c.IconUrl))
                .ToImmutableList();

            return new CategoriesList(convertedCategories);
        }
    }
}
